swagger: "2.0"
info:
  description: "HR Management APIs for managing admin, director, hr, manager, employee." 
  version: "1.0.0"
  title: "HR Management APIs"
tags:
  - name: users
    description: Endpoints related to user management
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '8b5d146f-9b0e-4c1a-866f-0c059d46482f'
        isDeleted:
          type: boolean
          example: false
        username:
          type: string
          example: admin_user
        password:
          type: string
          example: $2b$10$Y22Cln0lvHMIbRHUSt/T9OZGDiPQxspAzA5rn/sJ7OYczD63qibGq
        firstName:
          type: string
          example: Karen
        lastName:
          type: string
          example: Anderson
        age:
          type: integer
          example: 42
        email:
          type: string
          example: karen.anderson@example.com
        phone:
          type: string
          example: 555-555-1234
        address:
          type: string
          example: 123 Main St
        identificationCard:
          type: string
          example: ABC123456
        employeeCode:
          type: string
          example: 47556
        updatedAt:
          type: string
          format: date-time
          example: '2023-05-02T13:19:08.297Z'
        createdAt:
          type: string
          format: date-time
          example: '2023-05-02T13:19:08.297Z'
      required:
      - id
      - username
      - password
      - firstName
      - lastName
      - email
      - role
    UserUpdate:
      type: object
      properties:
        password:
          type: string
          example: $2b$10$Y22Cln0lvHMIbRHUSt/T9OZGDiPQxspAzA5rn/sJ7OYczD63qibGq
        firstName:
          type: string
          example: Karen
        lastName:
          type: string
          example: Anderson
        age:
          type: integer
          example: 42
        email:
          type: string
          example: karen.anderson@example.com
        phone:
          type: string
          example: 555-555-1234
        ManagerId:
          type: string
          example: '8b5d146f-9b0e-4c1a-866f-0c059d46482f'
host: "localhost:8080"
basePath: "/api/v1"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                age:
                  type: integer
                email:
                  type: string
                phone:
                  type: string
                address:
                  type: string
                identificationCard:
                  type: string
                role:
                  type: string
              required:
                - username
                - password
                - firstName
                - lastName
                - email
                - role
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
                      status:
                        type: integer
                        example: 201
                      message:
                        type: string
                        example: User created successfully
        '409':
          description: User already exists in database
          content:
            text/html:
              schema:
                type: string
    get:
      summary: "Get list of users"
      parameters:
        - name: "pageIndex"
          in: "query"
          type: "integer"
          required: false
          description: "Page index of paging API"
        - name: "pageSize"
          in: "query"
          type: "integer"
          required: false
          description: "Page size of paging API"
      responses:
        "200":
          description: "List of users retrieved successfully"
  /users/login:
    post:
      summary: User Login
      description: Login an existing user and obtain a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: employee_user
                password:
                  type: string
                  example: employee
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImQ5ZmI0MTg5LWQ3NTMtNDMyNC1hZDM1LTU5ZDE0MDhlMzU2NCIsImlhdCI6MTY4MzAzNDg5MCwiZXhwIjoxNjgzMjk0MDkwfQ.kyxUC40Qq7sKVM26MFxMF4PbId7kl7WjH-VeqArRPX0
                    required:
                      - data
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Login succeed
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Passwords do not match
                    required:
                      - message
                  status:
                    type: integer
                    example: 401
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User not found in database
                    required:
                      - message
                  status:
                    type: integer
                    example: 404
  /users/{userId}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to get
          schema:
            type: string
            example: 8b5d146f-9b0e-4c1a-866f-0c059d46482f
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
            format: uuid
        - name: user
          in: body
          description: User object to update
          required: true
          schema:
            $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found